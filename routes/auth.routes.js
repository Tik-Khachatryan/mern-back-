const {Router}                  = require('express');const router                    = Router();const User                      = require('../models/User');const bcrypt                    = require('bcryptjs');const {check, validationResult} = require('express-validator');const jwt                       = require('jsonwebtoken');const config                    = require('config');// /api/auth/registerrouter.post(    '/register',    [        check('email', 'incorrect email').isEmail(),        check('password', 'min length must be 6 symbols').isLength({min: 6})    ],    async (req, res) => {        try {            const errors = validationResult(req);            if (!errors.isEmpty()) {                return res.status(400).json({                    errors: errors.array(),                    msg: "incorrect data in login"                })            }            const {email, password} = req.body;            const candidate         = await User.findOne({email});            if (candidate) {                return res.status(400).json({msg: "User such already"})            }            const hashedpassword = await bcrypt.hash(password, 12);            const user           = new User({email, password: hashedpassword});            await user.save();            res.status(200).json({msg: "user created"})        } catch (e) {            res.status(500).json({msg: "Something went those so, try again"})        }    });// /api/auth/loginrouter.post(    '/login',    [        check('email', 'write correct email').normalizeEmail().isEmail(),        check('password', 'write correct password').exists()    ],    async (req, res) => {        try {            const errors = validationResult(req);            if (!errors.isEmpty()) {                return res.status(400).json({                    errors: errors.array(),                    msg: "incorrect data in login"                })            }            const {email, password} = req.body;            const user              = await User.findOne({ email });            if (!user) {                return res.status(400).json({msg: "user not found"})            }            const isMutch = await bcrypt.compare(password, user.password);            if (!isMutch) {                return res.status(400).json({msg: "incorrect password, try again"})            }            const token = jwt.sign({userId: user.id}, config.get('jwtSecret'), {expiresIn: '1h'});            res.json({token, userId: user.id});        } catch (e) {            res.status(500).json({msg: "Something went those so, try again"})        }    });module.exports = router;